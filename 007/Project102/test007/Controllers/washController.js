async function initWashPage() {
  try {
    console.log("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏±‡∏Å‡∏ú‡πâ‡∏≤...");

    setupListeners();       // üß© 1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    await renderTable();    // üìä 2. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å (washJobs)
    await renderHistory();  // üßæ 3. ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ESD (washHistory)
    await updateSummary();  // üìå 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô dashboard

    console.log("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  } catch (error) {
    console.error("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Wash:", error);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠");
  }
}

async function openForm(id = null) {
  clearForm();

  document.getElementById("modalTitle").innerText = id ? "Edit Wash" : "Add Wash";

  if (id) {
    const data = await fetchWashById(id);
    if (data) {
      fillFormWithData(data); // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    } else {
      alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
    }
  }

  toggleModal(true);
}

function setupSearchListeners() {
  const searchInput = document.getElementById("search");
  if (searchInput) {
    searchInput.addEventListener("input", debounce(renderTable, 300));
  }
}

function setupFilterListeners() {
  const filterStatus = document.getElementById("filterStatus");
  if (filterStatus) {
    filterStatus.addEventListener("change", renderTable);
  }
}

function setupFormListeners() {
  const uniformCodeInput = document.getElementById("uniformCode");
  if (uniformCodeInput) {
    uniformCodeInput.addEventListener("input", debounce(autofillUniformInfo, 300));
  }

  const saveBtn = document.getElementById("saveBtn");
  if (saveBtn) {
    saveBtn.addEventListener("click", saveWash);
  }

  const colorInput = document.getElementById("color");
  if (colorInput) {
    colorInput.addEventListener("change", fetchEmployeeByColor);
  }
}

function setupModalListeners() {
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") toggleModal(false);
  });
}

function setupListeners() {
  setupSearchListeners();
  setupFilterListeners();
  setupFormListeners();
  setupModalListeners();
}

async function renderTable() {
  try {
    const data = await fetchAndFilterWashData();
    updateStatusIfNeeded(data);  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    renderWashTable(data); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  } catch (error) {
    console.error("‚ùå Error rendering table:", error);
  }
}

async function renderHistory(page = 1, pageSize = 10) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á
    const historyData = await fetchWashHistory();

    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const sortedData = sortWashHistory(historyData);

    // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤
    const startIndex = (page - 1) * pageSize;
    const paginatedData = sortedData.slice(startIndex, startIndex + pageSize);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    renderWashHistoryTable(paginatedData);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalPages = Math.ceil(sortedData.length / pageSize);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° pagination
    renderHistoryPagination(totalPages, page);
  } catch (error) {
    console.error("‚ùå Error rendering history:", error);
  }
}

async function updateSummary() {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const data = await fetchSummaryData();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const summary = calculateWashSummary(data);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô UI
    renderSummary(summary);
  } catch (error) {
    console.error("‚ùå Error updating summary:", error);
  }
}

async function autofillUniformInfo() {
  const code = document.querySelector("#uniformCode")?.value.trim();
  
  if (!code) {
    clearFormFields(); // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ä‡∏∏‡∏î
    return;
  }

  const colors = await fetchColorsByUniformCode(code);

  if (colors.length === 0) {
    clearFormFields(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
  } else {
    renderColorDropdown(colors); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡πÉ‡∏ô dropdown
  }
}
